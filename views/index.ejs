<!DOCTYPE html>
<html lang="en">
  <head>
    <style>
      *,
      *::before,
      *::after {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        overflow: scroll;
        background: linear-gradient(to bottom right, #1cacf4, #1c04fc);
        height: 100vh;
        max-width: 800px;
        margin: auto;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        font-family: Roboto, sans-serif;
        text-align: center;
        font-weight: 300;
        line-height: 1.6;
        position: relative;
      }

      .problem {
        position: fixed;
        overflow: hidden;
        padding: 40px;
        color: white;
        border-radius: 10px;
        margin: 20px;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2),
          inset 0 0 10px rgba(0, 0, 0, 0.2);
      }

      .blur-tile {
        position: absolute;
        filter: blur(50px);
        top: -30px;
        right: -30px;
        bottom: -30px;
        left: -30px;
        background: rgba(255, 255, 255, 0.15);
        color: red;
        z-index: -5;
      }

      @keyframes pop {
        from {
          opacity: 0.2;
          transform: scale(0.3);
          /*     filter: blur(10px); */
        }
        to {
          opacity: 1;
          transform: scale(1);
          /*     filter: blur(0px); */
        }
      }

      @keyframes blurBg {
        from {
          filter: blur(0px) saturate(1);
        }
        to {
          filter: blur(5px) saturate(0.1);
        }
      }

      @keyframes err {
        30% {
          color: red;
          transform-origin: center;
          transform: translateX(-10px) scale(0.9) rotate(-5deg);
        }

        50% {
          color: white;
          transform-origin: center;
          transform: translateX(10px) scale(1.1) rotate(0deg);
        }

        70% {
          color: red;
          transform-origin: center;
          transform: translateX(-10px) scale(0.9) rotate(5deg);
        }
      }

      .error {
        transform-origin: center;
        animation: err 0.5s ease-in-out infinite;
      }

      .blur {
        animation: blurBg 0.3s forwards ease-in;
      }

      .question {
        font-size: 75px;
        font-weight: 900;
        line-height: 1;
        margin-bottom: 20px;
        text-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
      }

      .problem form * {
        display: block;
        margin: 0 auto 20px;
      }

      .problem form input {
        background: transparent;
        padding: 5px 12px;
        outline: none;
        border: none;
        border-bottom: 2px solid white;
        width: 80%;
        box-shadow: 0 8px 4px -4px rgba(0, 0, 0, 0.15);
        font-size: 22px;
        color: white;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.4);
      }

      .problem form input:active,
      .problem form input:focus {
        box-shadow: 0 8px 6px -4px rgba(0, 0, 0, 0.3);
      }

      .problem form input::placeholder {
        color: rgba(255, 255, 255, 0.3);
        font-size: 14px;
        text-align: center;
      }

      button {
        font-family: Roboto, sans-serif;
        font-weight: 700;
        font-size: 16px;
        text-transform: uppercase;
        outline: none;
        border: none;
        border-radius: 8px;
        color: white;
        background: #000;
        padding: 10px 20px;
        background: linear-gradient(to bottom right, #e6e603, #f6951b);
        text-shadow: 0 2px 2px rgba(0, 0, 0, 0.3);
        box-shadow: 0 5px 10px rgba(0, 0, 0, 0.15);
        transition: padding 0.2s;
      }

      button:focus {
        outline: none;
        border: none;
        box-shadow: 0 5px 10px rgba(0, 0, 0, 0.3);
      }

      .progress {
        height: 10px;
        width: 100%;
        margin: 20px auto;
        position: relative;
        overflow: hidden;
      }

      .boxes {
        display: flex;
        height: 100%;
      }

      .box {
        height: 100%;
        border: 1px solid rgba(255, 255, 255, 0.7);
        flex-grow: 1;
      }

      .progress-bar {
        position: absolute;
        background: #04e474;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        z-index: -1;
        transform-origin: left;
        transform: scaleX(0);
        transition: transform 0.2s ease-in-out;
      }

      .overlay {
        position: fixed;
        background: rgba(0, 0, 0, 0.3);
        width: 100vw;
        height: 100vh;
        color: white;
        margin: auto;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        font-weight: 900;
        animation: pop 0.5s ease-in-out;
      }

      .hid {
        animation: pop 2s ease-out;
        display: none;
      }

      .game-status {
        font-size: 40px;
        text-shadow: 0 4px 10px rgba(0, 0, 0, 0.4);
        margin-bottom: 10px;
      }

      .overlay button {
        font-size: 40px;
        font-size: 25px;
      }
    </style>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Trivia atemática</title>
  </head>
  <body>
    <div class="problem">
      <div class="blur-tile"></div>

      <h1 class="question">Preguntas</h1>
      <form action="#">
        <input
          type="number"
          autocomplete="off"
          placeholder="Escriba su respuesta aquí"
        />
        <button>Enviar Pregunta</button>
      </form>
      <p class="statement">
        Tienes 10 preguntas que responder y puedes tener solo 3 errores.
      </p>

      <div class="progress">
        <div class="progress-bar"></div>
        <div class="boxes">
          <div class="box"></div>
          <div class="box"></div>
          <div class="box"></div>
          <div class="box"></div>
          <div class="box"></div>
          <div class="box"></div>
          <div class="box"></div>
          <div class="box"></div>
          <div class="box"></div>
          <div class="box"></div>
        </div>
      </div>
    </div>
    <div
      style="
        position: fixed;
        margin-top: 10px;
        color: white;
        margin-right: 780px;
      "
    >
      <h3>Conectados</h3>
      <ul id="listConect"></ul>
    </div>

    <div class="overlay hid">
      <p class="game-status"></p>
      <button>Iniciar</button>
    </div>
    <script src="http://code.jquery.com/jquery-1.11.1.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.0/axios.js"></script>
    <script src="../../socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>

    <script>
      let socket = io();
      let Nombre = prompt("Escribe tu Nombre Completo");
      socket.on("msg", function (data) {
        
        let list = document.getElementById("listConect");
        let item = document.createElement("li");
        let text = document.createElement("p");
        let text2 = document.createElement("p");
        var t = document.createTextNode("Nombre:"+" " + data.name );
        var t2 = document.createTextNode(  "Resultado:"+ " " + data.res );
      
        text.appendChild(t);
        text2.appendChild(t2)
        item.appendChild(text)
        item.appendChild(text2)
        list.appendChild(item);
      });
      // Variable Declarations
      const question = document.querySelector(".question");
      const form = document.querySelector("form");
      const userAnswer = document.querySelector("form input");
      const popUp = document.querySelector(".overlay");
      const bg = document.querySelector(".problem");
      const progressBar = document.querySelector(".progress-bar");
      const statement = document.querySelector(".statement");
      const gameStatus = document.querySelector(".game-status");
      const reset = document.querySelector(".overlay button");

      userAnswer.focus();

      let state = {
        wrongAnswers: 0,
        questionsLeft: 10,
      };

      // Function Declarations
      function generateNumber(x) {
        return Math.floor(Math.random() * x + 1);
      }

      function generateQuestion() {
        let a = generateNumber(10);
        let b = generateNumber(10);
        if (b > a) {
          a = a + b;
          b = a - b;
          a = a - b;
        }
        return {
          value1: a,
          value2: b,
          operator: ["+", "-", "x"][generateNumber(2)],
        };
      }

      function updateQuestion() {
        state.currentQuestion = generateQuestion();
        let q = state.currentQuestion;
        question.textContent = `${q.value1} ${q.operator} ${q.value2}`;
      }

      function updateStatement() {
        let x = state.questionsLeft;
        let y = state.wrongAnswers;
        let message = `tienes preguntas ${x} `;
        if (x > 1) {
          message += `s`;
        }
        message += `  para responder <br>y puede responder ${3 - y} mal`;
        if (3 - y > 1) {
          message += `s`;
        }
        message += ".";
        return message;
      }

      function formSub(e) {
        e.preventDefault();
        userAnswer.focus();

        let q = state.currentQuestion;
        let correctAnswer;

        if (q.operator === "+") correctAnswer = q.value1 + q.value2;
        if (q.operator === "-") correctAnswer = q.value1 - q.value2;
        if (q.operator === "x") correctAnswer = q.value1 * q.value2;

        // form.focus();

        if (correctAnswer === userAnswer.valueAsNumber) {
          state.questionsLeft -= 1;
          statement.innerHTML = updateStatement();
          progressBar.style.transform = `scaleX(0.${10 - state.questionsLeft})`;

          if (state.questionsLeft === 0) {
            reset.focus();
            gameOver(true);
          }
        } else {
          state.wrongAnswers += 1;
          question.classList.add("error");
          statement.innerHTML = updateStatement();
          setTimeout(() => {
            question.classList.remove("error");
          }, 550);
          if (state.wrongAnswers === 3) {
            reset.focus();
            gameOver(false);
          }
        }
        userAnswer.value = "";
        updateQuestion();
      }

      function gameOver(won) {
        form.blur();
        userAnswer.blur();

        bg.classList.add("blur");
        popUp.classList.remove("hid");
        progressBar.style.transform = `scaleX(0.0)`;

        if (won) {
          gameStatus.textContent = `¡Felicidades! Has ganado el juego.`;
          socket.emit("resultUser", { name: Nombre, res: "Gano la Prueba" });
        } else {
          gameStatus.textContent = `Lo siento, has perdido el juego.`;
          socket.emit("resultUser", { name: Nombre, res: "Perdio la Prueba" });
        }
        reset.focus();
      }

      function resetGame() {
        state.questionsLeft = 10;
        state.wrongAnswers = 0;

        bg.classList.remove("blur");
        popUp.classList.add("hid");
        progressBar.style.transform = `scaleX(0.0)`;
        statement.innerHTML = `Tienes... ${
          state.questionsLeft
        } preguntas para responder <br>y puede responder ${
          3 - state.wrongAnswers
        } errores.`;
        updateQuestion();

        userAnswer.focus();
      }

      // Events
      form.addEventListener("submit", formSub);
      reset.addEventListener("click", resetGame);

      // Function Calls
      updateQuestion();
    </script>
  </body>
</html>
